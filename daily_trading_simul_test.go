/* Copyright (C) 2015년 김운하(UnHa Kim)  unha.kim@kuh.pe.kr

이 파일은 GHTS의 일부입니다.

이 프로그램은 자유 소프트웨어입니다.
소프트웨어의 피양도자는 자유 소프트웨어 재단이 공표한 GNU LGPL 2.1판
규정에 따라 프로그램을 개작하거나 재배포할 수 있습니다.

이 프로그램은 유용하게 사용될 수 있으리라는 희망에서 배포되고 있지만,
특정한 목적에 적합하다거나, 이익을 안겨줄 수 있다는 묵시적인 보증을 포함한
어떠한 형태의 보증도 제공하지 않습니다.
보다 자세한 사항에 대해서는 GNU LGPL 2.1판을 참고하시기 바랍니다.
GNU LGPL 2.1판은 이 프로그램과 함께 제공됩니다.
만약, 이 문서가 누락되어 있다면 자유 소프트웨어 재단으로 문의하시기 바랍니다.
(자유 소프트웨어 재단 : Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA)

Copyright (C) 2015년 UnHa Kim (unha.kim@kuh.pe.kr)

This file is part of GHTS.

GHTS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, version 2.1 of the License.

GHTS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with GHTS.  If not, see <http://www.gnu.org/licenses/>. */

package ghts_utils

import (
	공용 "github.com/ghts/ghts_common"

	"testing"
	"time"
	"strings"
	"strconv"
)

func TestF키(t *testing.T) {
	종목코드 := 공용.F임의_문자열(3, 7)
	일자 := time.Now()
	공용.F테스트_같음(t, f키(종목코드, 일자), 종목코드 + "_" + 일자.Format("20060102"))
}

func TestS일일가격정보_저장소(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	초기_일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")
	기간 := 5

	// 가격정보 설정
	가격정보_저장소 := New일일가격정보_저장소()
	for i := 0; i <= 기간; i++ {
		시가 := 100 + 10*int64(i)
		종가 := 시가 + 10

		가격정보 := 공용.S일일_가격정보{M종목코드: 종목.G코드(),
			M일자: 초기_일자.AddDate(0, 0, i),
			M시가: 시가,
			M종가: 종가, M조정종가: 종가}

		가격정보_저장소.S추가(&가격정보)
	}

	// G일자_존재()
	공용.F테스트_참임(t, 가격정보_저장소.G전종목_일자_존재(초기_일자.AddDate(0,0,공용.F임의_정수값_범위_이내(0,기간))))
	공용.F테스트_거짓임(t, 가격정보_저장소.G전종목_일자_존재(time.Time{}))

	// G전일()
	for i:=0 ; i <기간 ; i++ {
		금일 := 초기_일자.AddDate(0,0,i+1)
		전일, 에러 := 가격정보_저장소.G전종목_전일(금일)
		공용.F테스트_에러없음(t, 에러)
		공용.F테스트_같음(t, 전일, 금일.AddDate(0,0,-1))
	}

	// G과거_일자()
	차이 := 공용.F임의_정수값_범위_이내(1, 기간)
	과거_일자, 에러 := 가격정보_저장소.G전종목_과거_일자(초기_일자.AddDate(0,0,기간), 차이)
	공용.F테스트_에러없음(t, 에러)
	공용.F테스트_같음(t, 과거_일자, 초기_일자.AddDate(0,0,기간-차이))

	// G명일()
	for i:=0 ; i <기간 ; i++ {
		금일 := 초기_일자.AddDate(0,0,i)
		전일, 에러 := 가격정보_저장소.G전종목_명일(금일)
		공용.F테스트_에러없음(t, 에러)
		공용.F테스트_같음(t, 전일, 금일.AddDate(0,0,1))
	}

	// G미래_일자()
	차이 = 공용.F임의_정수값_범위_이내(1, 기간)
	미래_일자, 에러 := 가격정보_저장소.G전종목_미래_일자(초기_일자, 차이)
	공용.F테스트_에러없음(t, 에러)
	공용.F테스트_같음(t, 미래_일자, 초기_일자.AddDate(0,0,차이))

	// G종목별_일자_모음()
	종목별_일자_모음 := 가격정보_저장소.G종목별_일자_모음(종목.G코드())
	for i, 일자 := range 종목별_일자_모음 {
		공용.F테스트_같음(t, 일자, 초기_일자.AddDate(0,0,i))
	}

	// G일자_모음()
	일자_모음 := 가격정보_저장소.G전종목_일자_모음()
	for i, 일자 := range 일자_모음 {
		공용.F테스트_같음(t, 일자, 초기_일자.AddDate(0,0,i))
	}

	// G일일_가격정보()
	차이 = 	공용.F임의_정수값_범위_이내(0, 기간)
	일일_가격정보 := 가격정보_저장소.G일일_가격정보(종목.G코드(), 초기_일자.AddDate(0,0,차이))
	공용.F테스트_다름(t, 일일_가격정보, nil)
	공용.F테스트_같음(t, 일일_가격정보.M시가, 100 + 10*int64(차이))
	공용.F테스트_같음(t, 일일_가격정보.M종가, 100 + 10*int64(차이) + 10)

	// G전일_가격정보()
	차이 = 	공용.F임의_정수값_범위_이내(1, 기간)
	전일_가격정보 := 가격정보_저장소.G전일_가격정보(종목.G코드(), 초기_일자.AddDate(0,0,차이))
	공용.F테스트_다름(t, 전일_가격정보, nil)
	공용.F테스트_같음(t, 전일_가격정보.M시가, 100 + 10*int64(차이-1))
	공용.F테스트_같음(t, 전일_가격정보.M종가, 100 + 10*int64(차이-1) + 10)

	// G명일_가격정보()
	차이 = 	공용.F임의_정수값_범위_이내(0, 기간-1)
	명일_가격정보 := 가격정보_저장소.G명일_가격정보(종목.G코드(), 초기_일자.AddDate(0,0,차이))
	공용.F테스트_다름(t, 명일_가격정보, nil)
	공용.F테스트_같음(t, 명일_가격정보.M시가, 100 + 10*int64(차이+1))
	공용.F테스트_같음(t, 명일_가격정보.M종가, 100 + 10*int64(차이+1) + 10)

	// G단순이동평균()
	기준일 := 초기_일자.AddDate(0, 0, 기간)

	단순이동평균_조정시가, 에러 := 가격정보_저장소.G단순이동평균(종목.G코드(), 기준일, 기간, P조정시가)
	공용.F테스트_에러없음(t, 에러)
	공용.F테스트_같음(t, 단순이동평균_조정시가, 130)

	단순이동평균_조정종가, 에러 := 가격정보_저장소.G단순이동평균(종목.G코드(), 기준일, 기간, P조정종가)
	공용.F테스트_에러없음(t, 에러)
	공용.F테스트_같음(t, 단순이동평균_조정종가, 140)
}

func TestS거래내역(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	수량 := int64(공용.F임의_양의_정수값())
	매입일 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")
	매입_단가 := int64(100)
	손절매_단가 := int64(매입_단가 * 100 / 80)
	매도일 := 매입일.AddDate(0,0,1)
	매도_단가 := 매입_단가 + 10

	거래내역 := New거래내역(종목.G코드(), 수량, 매입일, 매입_단가, 손절매_단가)
	공용.F테스트_같음(t, 거래내역.G종목코드(), 종목.G코드())
	공용.F테스트_같음(t, 거래내역.G수량(), 수량)
	공용.F테스트_같음(t, 거래내역.G매입일(), 매입일)
	공용.F테스트_같음(t, 거래내역.G매입_단가(), 매입_단가)
	공용.F테스트_같음(t, 거래내역.G손절매_단가(), 손절매_단가)
	공용.F테스트_거짓임(t, 거래내역.G거래완료())
	공용.F테스트_같음(t, 거래내역.G매도_단가(), 0)
	공용.F테스트_같음(t, 거래내역.G매도일(), time.Time{})

	거래내역.S매도기록(매도일, 매도_단가)
	공용.F테스트_참임(t, 거래내역.G거래완료())
	공용.F테스트_같음(t, 거래내역.G매도_단가(), 매도_단가)
	공용.F테스트_같음(t, 거래내역.G매도일(), 매도일)
}

func TestS포트폴리오_구성요소(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")
	수량 := int64(공용.F임의_정수값_범위_이내(1, 10))
	평가액_기준가 := int64(공용.F임의_정수값_범위_이내(1000, 2000))

	구성요소 := New포트폴리오_구성요소(종목.G코드(), 일자, 수량, 평가액_기준가)
	공용.F테스트_같음(t, 구성요소.G종목코드(), 종목.G코드())
	공용.F테스트_같음(t, 구성요소.G일자(), 일자)
	공용.F테스트_같음(t, 구성요소.G수량(), 수량)
	공용.F테스트_같음(t, 구성요소.G평가액(), 수량 * 평가액_기준가)
	공용.F테스트_같음(t, 구성요소.G키(), f키(종목.G코드(), 일자))
	공용.F테스트_같음(t, 구성요소.G복제본(), 구성요소)

	// String()
	문자열 := 구성요소.String()
	공용.F테스트_참임(t, strings.Contains(문자열, 구성요소.G키()), 문자열)
	공용.F테스트_참임(t, strings.Contains(문자열, 종목.G코드() + ","), 문자열)
	공용.F테스트_참임(t, strings.Contains(문자열, 일자.Format(공용.P일자_형식) + ","), 문자열)
	공용.F테스트_참임(t, strings.Contains(문자열, strconv.FormatInt(수량, 10) + ", "), 문자열)
	공용.F테스트_참임(t, strings.Contains(문자열, strconv.FormatInt(수량 * 평가액_기준가, 10)), 문자열)

	// s매입()
	매입_수량 := int64(공용.F임의_정수값_범위_이내(1, 10))
	구성요소.s매입(매입_수량, 평가액_기준가)
	공용.F테스트_같음(t, 구성요소.G수량(), 수량 + 매입_수량)
	공용.F테스트_같음(t, 구성요소.G평가액(), (수량 + 매입_수량) * 평가액_기준가)

	// s매도()
	매도_수량 := int64(공용.F임의_정수값_범위_이내(1, int(구성요소.G수량()) - 1))
	구성요소.s매도(매도_수량, 평가액_기준가)
	공용.F테스트_같음(t, 구성요소.G수량(), 수량 + 매입_수량 - 매도_수량)
	공용.F테스트_같음(t, 구성요소.G평가액(), (수량 + 매입_수량 - 매도_수량) * 평가액_기준가)

	// s전량_매도()
	구성요소.s전량_매도(평가액_기준가)
	공용.F테스트_같음(t, 구성요소.G수량(), 0)
	공용.F테스트_같음(t, 구성요소.G평가액(), 0)

	// New현금()
	현금 := New현금(일자, int64(100))
	공용.F테스트_같음(t, 현금.G종목코드(), P현금_코드)
	공용.F테스트_같음(t, 현금.G수량(), 1)
	공용.F테스트_같음(t, 현금.G평가액(), 100)
}

func TestS포트폴리오(t *testing.T) {
	초기_일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	초기_현금 := New현금(초기_일자, 10000000)

	포트폴리오 := New포트폴리오()
	포트폴리오.S추가(초기_현금)

	공용.F테스트_같음(t, len(포트폴리오.포트폴리오_맵), 1)
	공용.F테스트_같음(t, len(포트폴리오.포트폴리오_일자_코드_키), 1)
	공용.F테스트_같음(t, len(포트폴리오.포트폴리오_코드_일자_키), 1)

	for 키, 값 := range 포트폴리오.포트폴리오_맵 {
		공용.F테스트_같음(t, 키, 초기_현금.키)
		공용.F테스트_같음(t, 값, 초기_현금)
	}

	for 키, 코드_맵 := range 포트폴리오.포트폴리오_일자_코드_키 {
		공용.F테스트_같음(t, 키, 초기_일자)
		공용.F테스트_같음(t, len(코드_맵), 1)

		for 코드, _ := range 코드_맵 {
			공용.F테스트_같음(t, 코드, P현금_코드)
		}
	}

	for 키, 일자_맵 := range 포트폴리오.포트폴리오_코드_일자_키 {
		공용.F테스트_같음(t, 키, P현금_코드)
		공용.F테스트_같음(t, len(일자_맵), 1)

		for 일자, _ := range 일자_맵 {
			공용.F테스트_같음(t, 일자, 초기_일자)
		}
	}

	일자_모음 := 포트폴리오.G종목별_일자_모음(P현금_코드)
	공용.F테스트_다름(t, 일자_모음, nil)
	공용.F테스트_같음(t, len(일자_모음), 1)
	공용.F테스트_같음(t, 일자_모음[0], 초기_일자)

	코드_모음 := 포트폴리오.G일자별_코드_모음(초기_일자)
	공용.F테스트_다름(t, 코드_모음, nil)
	공용.F테스트_같음(t, len(코드_모음), 1)
	공용.F테스트_같음(t, 코드_모음[0], P현금_코드)

	가격정보_저장소 := New일일가격정보_저장소()
	가격정보_저장소.S추가(&(공용.S일일_가격정보{M종목코드: 종목.G코드(),
		M일자: 초기_일자.AddDate(0, 0, 1), M고가: 300, M저가: 100,
		M시가: 130, M상한가: 350, M하한가: 50, M시가총액: 20000, M외인비율: 0.0, PER: 1.0, PBR: 1.0,
		M현재가: 170, M종가: 150, M조정종가: 150, M거래량: 100}))
	가격정보_저장소.S추가(&(공용.S일일_가격정보{M종목코드: 종목.G코드(),
		M일자: 초기_일자.AddDate(0, 0, 2), M고가: 300, M저가: 100,
		M시가: 130, M상한가: 350, M하한가: 50, M시가총액: 20000, M외인비율: 0.0, PER: 1.0, PBR: 1.0,
		M현재가: 170, M종가: 150, M조정종가: 150, M거래량: 100}))
	가격정보_저장소.S추가(&(공용.S일일_가격정보{M종목코드: 종목.G코드(),
		M일자: 초기_일자.AddDate(0, 0, 3), M고가: 300, M저가: 100,
		M시가: 130, M상한가: 350, M하한가: 50, M시가총액: 20000, M외인비율: 0.0, PER: 1.0, PBR: 1.0,
		M현재가: 170, M종가: 150, M조정종가: 150, M거래량: 100}))

	포트폴리오.S전일_복제(초기_일자.AddDate(0, 0, 1), 가격정보_저장소)
	공용.F테스트_같음(t, len(포트폴리오.포트폴리오_맵), 2)

	포트폴리오.S매입(종목.G코드(), 초기_일자.AddDate(0, 0, 1), 1, 150, F정수64_비율(150, 0.8))
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-150)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 1)

	포트폴리오.S매입(종목.G코드(), 초기_일자.AddDate(0, 0, 1), 2, 150, F정수64_비율(150, 0.8))
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-450)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 3)

	포트폴리오.S전일_복제(초기_일자.AddDate(0, 0, 2), 가격정보_저장소)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 2)).G평가액(), 초기_현금.G평가액()-450)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 2))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 2)), 3)

	포트폴리오.S매도(종목.G코드(), 초기_일자.AddDate(0, 0, 2), 1, 150)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 2)).G평가액(), 초기_현금.G평가액()-300)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 2))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 2)), 2)

	포트폴리오.S매도(종목.G코드(), 초기_일자.AddDate(0, 0, 2), 2, 150)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 2)).G평가액(), 초기_현금.G평가액())
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 2))), 1)
}

func TestS포트폴리오_매입_매도(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	초기_일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")

	포트폴리오 := New포트폴리오()
	포트폴리오.S추가(New현금(초기_일자, 1000))
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 1)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 1000)

	포트폴리오.S매입(종목.G코드(), 초기_일자, 1, 100, int64(float64(100) * 0.8))
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 2)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 900)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G수량(), 1)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G평가액(), 100)

	포트폴리오.S매입(종목.G코드(), 초기_일자, 5, 100, int64(float64(100) * 0.8))
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 2)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 400)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G수량(), 6)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G평가액(), 600)

	포트폴리오.S매도(종목.G코드(), 초기_일자, 2, 100)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 2)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 600)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G수량(), 4)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G평가액(), 400)

	포트폴리오.S매도(종목.G코드(), 초기_일자, 3, 100)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 2)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 900)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G수량(), 1)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(종목.G코드(), 초기_일자).G평가액(), 100)

	포트폴리오.S매도(종목.G코드(), 초기_일자, 1, 100)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자)), 1)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자).G평가액(), 1000)
}

func TestS포트폴리오_금일_종가_명일_시가_매입_매도(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	초기_일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")

	가격정보_저장소 := New일일가격정보_저장소()
	가격정보_저장소.S추가(&(공용.S일일_가격정보{M종목코드: 종목.G코드(),
		M일자: 초기_일자.AddDate(0, 0, 1), M고가: 300, M저가: 100,
		M시가: 130, M상한가: 350, M하한가: 50, M시가총액: 20000, M외인비율: 0.0, PER: 1.0, PBR: 1.0,
		M현재가: 170, M종가: 150, M조정종가: 150, M거래량: 100}))
	가격정보_저장소.S추가(&(공용.S일일_가격정보{M종목코드: 종목.G코드(),
		M일자: 초기_일자.AddDate(0, 0, 2), M고가: 300, M저가: 100,
		M시가: 140, M상한가: 350, M하한가: 50, M시가총액: 20000, M외인비율: 0.0, PER: 1.0, PBR: 1.0,
		M현재가: 170, M종가: 160, M조정종가: 160, M거래량: 100}))

	초기_현금 := New현금(초기_일자, 100000)
	포트폴리오 := New포트폴리오()
	포트폴리오.S추가(초기_현금)
	포트폴리오.S전일_복제(초기_일자.AddDate(0, 0, 1), 가격정보_저장소)

	포트폴리오.S금일_종가_매입(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10, 20)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-1500)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 10)

	포트폴리오.S금일_종가_매도(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액())
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 1)

	포트폴리오.S명일_시가_매입(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10, 20)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-1400)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 10)

	포트폴리오.S명일_시가_매도(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액())
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 1)

	// 전량 매도
	포트폴리오.S금일_종가_매입(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10, 20)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-1500)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 10)

	포트폴리오.S금일_종가_전량_매도(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1))
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액())
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 1)

	포트폴리오.S명일_시가_매입(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1), 10, 20)
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액()-1400)
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 2)
	공용.F테스트_같음(t, 포트폴리오.G수량(종목.G코드(), 초기_일자.AddDate(0, 0, 1)), 10)

	포트폴리오.S명일_시가_전량_매도(가격정보_저장소, 종목.G코드(), 초기_일자.AddDate(0, 0, 1))
	공용.F테스트_같음(t, 포트폴리오.G구성요소(P현금_코드, 초기_일자.AddDate(0, 0, 1)).G평가액(), 초기_현금.G평가액())
	공용.F테스트_같음(t, len(포트폴리오.G일자별_코드_모음(초기_일자.AddDate(0, 0, 1))), 1)
}

func TestS포트폴리오_전일_복제_평가액(t *testing.T) {
	종목 := 공용.New종목("069500", "KODEX 200", 공용.P시장구분_ETF)
	초기_일자 := 공용.F2포맷된_일자_단순형(공용.P일자_형식, "2010-01-01")

	가격정보_저장소 := New일일가격정보_저장소()

	for i:=0 ; i < 10 ; i++ {
		가격정보 := 공용.S일일_가격정보{M종목코드: 종목.G코드(),
			M일자: 초기_일자.AddDate(0, 0, i),
			M시가: int64(100 * (i+1)),
			M종가: int64(100 * (i+1)),
			M조정종가: int64(100 * (i+1))}

		가격정보_저장소.S추가(&가격정보)
	}

	포트폴리오 := New포트폴리오()
	포트폴리오.S추가(New현금(초기_일자, 10000))
	포트폴리오.S매입(종목.G코드(), 초기_일자, 50, 100, F정수64_비율(100, 0.8))

	for i:=1 ; i < 10 ; i++ {
		일자 := 초기_일자.AddDate(0,0,i)
		포트폴리오.S전일_복제(일자, 가격정보_저장소)
		공용.F테스트_같음(t, 포트폴리오.G일자별_평가액(일자), 5000 + (i * 50 * 100))
	}
}